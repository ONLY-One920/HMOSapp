name: MallBackend CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
env:
  FLASK_ENV: test              
  DB_HOST: localhost           
  DB_PORT: 3306                
  DB_NAME: test_mall_db         
  DB_USER: root               
  DB_PASSWORD: root            
  SECRET_KEY: test_super_secret_key 
  JWT_SECRET_KEY: test_jwt_super_secret 
  ARK_API_KEY: test_ark_api_key       
  ARK_BASE_URL: https://test-ark.example.com/api/v3  
  ARK_DEFAULT_MODEL: test-model      

jobs:
  test:
    runs-on: ubuntu-latest     
    
    defaults:
      run:
        working-directory: ./MallBackend
    services:
      mysql:
        image: mysql:8.0        
        env:
          MYSQL_ROOT_PASSWORD: root      
          MYSQL_DATABASE: test_mall_db  
        ports:
          - 3306:3306           
       
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r requirements.txt 
        pip install -r requirements-test.txt  
        pip install flake8 black  
    
    - name: Check code style with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff . 
    
    - name: Wait for MySQL to be ready
      run: |
        sudo apt-get install -y mysql-client 
        
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1" test_mall_db; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i"
          sleep 2
        done
    
    - name: Run database migrations
      run: |
        python migrate.py 
    
    - name: Run tests with pytest
      run: |
        echo "Checking test files..."
        find tests/ -name "test_*.py" | wc -l
        pytest -v --cov=app --cov-report=xml --cov-report=html tests/
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }} 
        path: MallBackend/htmlcov/  
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: MallBackend/test-reports/

  security-scan:
    runs-on: ubuntu-latest
    needs: test  
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    defaults:
      run:
        working-directory: ./MallBackend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install safety
      run: pip install safety
    
    - name: Run security scan
      run: |
        safety check -r requirements.txt --full-report  
        safety check -r requirements-test.txt --full-report  
    
    - name: Run bandit for code security
      run: |
        pip install bandit 
    
        bandit -r app/ -f html -o bandit-report.html || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: MallBackend/bandit-report.html  

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan] 
  
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    environment: staging  
    
    defaults:
      run:
        working-directory: ./MallBackend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  
    
    - name: Deploy to staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_KEY }}
        STAGING_PATH: ${{ secrets.STAGING_PATH }}
      run: |
        echo "Deploying to staging environment..."
    
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging  
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: production 
    
    defaults:
      run:
        working-directory: ./MallBackend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to production
      env:
    
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_KEY }}
        PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}
      run: |
        echo "Deploying to production environment..."
