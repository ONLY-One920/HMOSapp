name: MallBackend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_mall_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-cov
    
    - name: Create environment file
      run: |
        cat > .env << EOF
        FLASK_APP=run.py
        FLASK_ENV=testing
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_NAME=test_mall_db
        DB_USER=root
        DB_PASSWORD=root
        SECRET_KEY=ci_test_secret_key
        JWT_SECRET_KEY=ci_test_jwt_secret
        ARK_API_KEY=test_ark_key
        ARK_BASE_URL=https://test-ark.example.com/api/v3
        ARK_DEFAULT_MODEL=test-model
        EOF
    
    - name: Wait for MySQL to be ready
      run: |
        sudo apt-get install -y mysql-client
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1" test_mall_db 2>/dev/null; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i"
          sleep 2
        done
    
    - name: Run migrations
      run: |
        python -c "
        from app import create_app, db
        app = create_app()
        with app.app_context():
            db.create_all()
        "
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        pip install flake8 black
    
    - name: Check code style with black
      run: |
        black --check app/ tests/
    
    - name: Check for lint errors with flake8
      run: |
        flake8 app/ tests/ --max-line-length=88 --ignore=E203,W503
