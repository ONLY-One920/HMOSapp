name: MallBackend CI/CD Pipeline

# 触发条件：推送到main/master分支或针对这些分支的PR时触发
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# 全局环境变量设置（适用于所有job）
env:
  FLASK_ENV: test              # Flask环境设置为测试环境
  DB_HOST: localhost           # 数据库主机地址
  DB_PORT: 3306                # 数据库端口
  DB_NAME: test_mall_db         # 测试数据库名称
  DB_USER: root                # 数据库用户名
  DB_PASSWORD: root            # 数据库密码（生产环境应使用secrets）
  SECRET_KEY: test_super_secret_key  # Flask应用密钥
  JWT_SECRET_KEY: test_jwt_super_secret  # JWT令牌密钥
  ARK_API_KEY: test_ark_api_key       # 第三方服务API密钥
  ARK_BASE_URL: https://test-ark.example.com/api/v3  # 第三方服务基础URL
  ARK_DEFAULT_MODEL: test-model       # 默认模型名称

# 定义工作流中的各个任务
jobs:
  # 测试任务
  test:
    runs-on: ubuntu-latest      # 使用最新版Ubuntu运行器
    
    # 设置默认工作目录
    defaults:
      run:
        working-directory: ./MallBackend
    
    # 启动MySQL服务容器（Docker容器作为服务）
    services:
      mysql:
        image: mysql:8.0        # 使用MySQL 8.0官方镜像
        env:
          MYSQL_ROOT_PASSWORD: root      # 设置root密码
          MYSQL_DATABASE: test_mall_db   # 创建测试数据库
        ports:
          - 3306:3306           # 暴露容器端口到主机
        # 健康检查配置
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # 矩阵策略：在多个Python版本上并行运行测试
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    # 任务执行步骤
    steps:
    # 检出代码到工作目录
    - uses: actions/checkout@v4
    
    # 设置指定版本的Python环境
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # 安装项目依赖和测试工具
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # 升级pip
        pip install -r requirements.txt  # 安装主依赖
        pip install -r requirements-test.txt  # 安装测试依赖（注意文件名修正）
        pip install flake8 black  # 安装代码检查工具
    
    # 使用flake8进行代码风格检查
    - name: Check code style with flake8
      run: |
        # 检查严重错误（E9,F63,F7,F82）
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 常规检查（忽略警告）
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # 使用black检查代码格式
    - name: Check formatting with black
      run: |
        black --check --diff .  # 检查格式并显示差异
    
    # 等待MySQL服务就绪
    - name: Wait for MySQL to be ready
      run: |
        sudo apt-get install -y mysql-client  # 安装MySQL客户端
        # 循环检测数据库连接
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1" test_mall_db; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i"
          sleep 2
        done
    
    # 执行数据库迁移
    - name: Run database migrations
      run: |
        python migrate.py  # 运行迁移脚本
    
    # 使用pytest运行测试并生成覆盖率报告
    - name: Run tests with pytest
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/  # 生成XML和HTML格式的覆盖率报告
    
    # 上传HTML覆盖率报告作为制品
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}  # 按Python版本命名
        path: MallBackend/htmlcov/  # 修正路径
    
    # 上传测试结果（假设有test-reports目录）
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: MallBackend/test-reports/

  # 安全扫描任务
  security-scan:
    runs-on: ubuntu-latest
    needs: test  # 依赖测试任务完成
    # 仅当推送到main/master分支时执行
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    # 设置默认工作目录
    defaults:
      run:
        working-directory: ./MallBackend
    
    steps:
    - uses: actions/checkout@v4
    
    # 设置Python环境（固定版本）
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # 安装安全扫描工具safety
    - name: Install safety
      run: pip install safety
    
    # 检查依赖库的安全漏洞
    - name: Run security scan
      run: |
        safety check -r requirements.txt --full-report  # 检查主依赖
        safety check -r requirements-test.txt --full-report  # 修正文件名
    
    # 使用bandit进行代码安全扫描
    - name: Run bandit for code security
      run: |
        pip install bandit  # 安装bandit
        # 扫描app目录，生成HTML报告（即使发现漏洞也继续）
        bandit -r app/ -f html -o bandit-report.html || true
    
    # 上传安全报告
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: MallBackend/bandit-report.html  # 修正路径

  # 预发布环境部署
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]  # 依赖前两个任务
    # 仅当推送到main/master分支时执行
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    environment: staging  # 关联GitHub环境配置
    
    # 设置默认工作目录
    defaults:
      run:
        working-directory: ./MallBackend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 安装生产依赖
    
    # 部署到预发布环境
    - name: Deploy to staging
      env:
        # 从GitHub Secrets获取敏感信息
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_KEY }}
        STAGING_PATH: ${{ secrets.STAGING_PATH }}
      run: |
        echo "Deploying to staging environment..."
        # 实际部署脚本占位符（例如使用rsync/ssh）

  # 生产环境部署
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging  # 依赖预发布部署
    # 仅当推送到main分支时执行（更严格的条件）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment: production  # 关联生产环境配置
    
    # 设置默认工作目录
    defaults:
      run:
        working-directory: ./MallBackend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # 部署到生产环境
    - name: Deploy to production
      env:
        # 从GitHub Secrets获取敏感信息
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_KEY }}
        PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}
      run: |
        echo "Deploying to production environment..."
        # 实际部署脚本占位符
